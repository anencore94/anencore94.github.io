<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="ko"><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" hreflang="ko" /><updated>2020-08-18T10:34:20+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">기술 블로그</title><subtitle>기술 블로그
</subtitle><author><name>김재연</name></author><entry><title type="html">Minikube 사용 가이드</title><link href="http://localhost:4000/2020/08/15/minikube-usage.html" rel="alternate" type="text/html" title="Minikube 사용 가이드" /><published>2020-08-15T00:50:00+09:00</published><updated>2020-08-15T00:50:00+09:00</updated><id>http://localhost:4000/2020/08/15/minikube-usage</id><content type="html" xml:base="http://localhost:4000/2020/08/15/minikube-usage.html">&lt;h1 id=&quot;1-개요&quot;&gt;1. 개요&lt;/h1&gt;

&lt;p&gt;쿠버네티스를 처음 공부할 때, 가장 먼저 접하게 되는 쿠버네티스 환경인 &lt;a href=&quot;https://github.com/kubernetes/minikube&quot;&gt;Minikube&lt;/a&gt; 를 사용하는 기본적인 방법을 다룹니다. Minikube 공식 문서 중 주로 사용하는 기능들을 위주로 작성되었습니다.&lt;/p&gt;

&lt;p&gt;Minikube 라는 단어에서 유추할 수 있듯이, 나만의 작은 쿠버네티스 클러스터를 로컬에 구축하고 사용하고자 하는 분들을 위해, CNCF 에서 직접 개발, 관리하는 오픈소스 프로젝트입니다.&lt;/p&gt;

&lt;p&gt;쿠버네티스를 처음 접하는 분들은 쿠버네티스 환경을 직접 구성하는 것 자체가 사실 매우 어려운 일이기 때문에, 쿠버네티스 공식 튜토리얼을 포함한 대부분의 쿠버네티스 입문서는 minikube 환경에서의 테스트를 바탕으로 하고 있습니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;본 문서는 release v1.11.0 을 기준으로 작성되었으며, 자세한 내용은 Minikube github 의 &lt;a href=&quot;https://github.com/kubernetes/minikube&quot;&gt;README.md&lt;/a&gt; 와 &lt;a href=&quot;https://minikube.sigs.k8s.io/docs/&quot;&gt;공식 사이트&lt;/a&gt;에 작성되어 있으니 참고바랍니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;2-prerequisite&quot;&gt;2. Prerequisite&lt;/h1&gt;

&lt;p&gt;Minikube 는 linux, macos, windows 를 모두 호환하는 프로젝트이지만, 본 문서에서는 linux kernel 기반 os 를 기준으로 작성되었습니다. 특히 windows 의 경우에는 다른 부분이 다소 있을 수 있으니 주의바랍니다.&lt;/p&gt;

&lt;h2 id=&quot;하드웨어&quot;&gt;하드웨어&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;cpu &amp;gt;= 2&lt;/li&gt;
  &lt;li&gt;free memory &amp;gt;= 2GB&lt;/li&gt;
  &lt;li&gt;free disk &amp;gt;= 20GB&lt;/li&gt;
  &lt;li&gt;외부망 접속 가능&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;소프트웨어&quot;&gt;소프트웨어&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;지원하는 Container or virtual machine manager 중 최소 하나
    &lt;ul&gt;
      &lt;li&gt;Docker, Hyperkit, Hyper-V, KVM, Parallels, Podman, VirtualBox, or VMWare&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;curl&lt;/li&gt;
  &lt;li&gt;kubectl&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;3-설치&quot;&gt;3. 설치&lt;/h1&gt;

&lt;p&gt;설치 방법은 굉장히 간단합니다. 먼저 원하는 작업 경로로 이동합니다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cd {$WorkSpace}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;원하는 버전의 바이너리를 현재 경로에 다운받습니다. (예: url 에서 v1.11.0 대신 v1.10.1 로 변경하면 minikube v1.10.1 를 받을 수 있습니다.)&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ curl -LO https://storage.googleapis.com/minikube/releases/v1.11.0/minikube-linux-amd64
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;바이너리를 $PATH 로 이동시켜 모든 경로에서 사용할 수 있게 합니다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo install minikube-linux-amd64 /usr/local/bin/minikube
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;다음을 입력하여 정상 설치된 것을 확인합니다.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ minikube version
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;minikube version: v1.11.0 와 같이 출력되면 정상 설치된 것입니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;4-사용-방법&quot;&gt;4. 사용 방법&lt;/h1&gt;

&lt;h2 id=&quot;시작하기&quot;&gt;시작하기&lt;/h2&gt;

&lt;p&gt;minikube 를 실행합니다.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ minikube start
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;os locale 설정이 ko_KR 로 설정되어 있다면, minikube 가 생성되고 있다는 안내 메시지들이 부분적으로 한글로 출력될 것입니다. 다만, 아직 한글 번역이 완성되지 않아 대부분의 메시지는 영어로 출력될 것입니다. &lt;a href=&quot;https://minikube.sigs.k8s.io/docs/contrib/translations/&quot;&gt;minikube-translations&lt;/a&gt; 를 참고하여 직접 번역을 반영해주실 수 있습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;다음과 같이 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;minikube start&lt;/code&gt; 시 여러 옵션을 지정하여 생성할 수도 있습니다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ minikube start --cpus=4 --memory='3000mb' --disk-size='30000mb' --driver=virtualbox --kubernetes-version=v1.16.3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;cpu 4 개, memory 3000 mb, disk size 30000 mb 를 가지는 minikube 를 virtualbox hypervisor 로 생성하며, 쿠버네티스 버전은 v1.16.3 으로 생성하라는 명령입니다.&lt;/li&gt;
  &lt;li&gt;자세한 option 은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;minikube start --help&lt;/code&gt; 를 통해 확인할 수 있습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;반복하여 사용하는 옵션은 다음과 같이 로컬에 정보를 저장하여, 매번 입력하지 않아도 설정되도록 할 수 있습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;cpu, memory, disk-size 와 같이 보통 자주 변경하지 않는 옵션은 지정해놓고 사용하는 것을 추천드립니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ minikube config view  # 로컬에 저장된 config 를 확인할 수 있습니다.
$ minikube config set memory 2048  # 이후로 생성되는 minikube 는 모두 memory 2048 mb 로 생성됩니다.
$ minikube config set memory 3072  # 덮어쓰기 방식으로 지정된 config 를 변경할 수도 있습니다.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;driver-option&quot;&gt;Driver option&lt;/h3&gt;

&lt;p&gt;driver option 은 주로 다음과 같은 option 을 사용합니다. (특정 버전 이전에서는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vm-driver&lt;/code&gt; parameter 와 동일합니다.)&lt;/p&gt;

&lt;p&gt;각각의 driver 마다 prerequisite 이 다릅니다. 자세한 내용은 다음 &lt;a href=&quot;https://minikube.sigs.k8s.io/docs/drivers/&quot;&gt;링크&lt;/a&gt;를 통해 확인바랍니다.&lt;/p&gt;

&lt;p&gt;주로 사용하는 driver 에 대한 간략한 설명은 다음과 같습니다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;docker : minikube 를 docker container 로 띄웁니다. 내부적으로 docker in docker 기능을 사용하여 여러 pod 들을 구동하게 됩니다. 대부분의&lt;/li&gt;
  &lt;li&gt;virtualbox : virtualbox package 를 사용해 vm 을 구축합니다.&lt;/li&gt;
  &lt;li&gt;kvm2 : kvm2 를 사용해 vm 을 구축합니다. host 의 gpu 등을 minikube 내부에서 사용하고 싶은 경우 등에 사용합니다.&lt;/li&gt;
  &lt;li&gt;none : root 권한으로만 사용 가능하며, host 의 docker 등의 자원들을 사용하여 Minikube 를 생성합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;접근하기&quot;&gt;접근하기&lt;/h2&gt;

&lt;p&gt;Minikube 를 생성하면 kubectl 이 참고하는 KUBECONFIG 경로(변경한 적이 없다면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~/.kube/config&lt;/code&gt;)에 Minikube 접근을 위한 config 파일이 생성된 것을 확인하실 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ kubectl config view
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;current-context 가 Minikube 를 바라보도록 설정된 것을 확인하실 수 있습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ kubectl get nodes
$ kubectl get cs
$ kubectl get pod -A
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;위 명령이 정상적으로 수행된다면, 이제 kubectl 을 사용한 k8s resource 관리를 자유롭게 할 수 있습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Minikube 인스턴스 내부에 직접 접근하고 싶은 경우에는, 다음 명령을 통해 접근 가능합니다. (사용한 driver option 에 따라 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;minikube ssh&lt;/code&gt; 를 사용할 수 없을 수도 있습니다.)&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ minikube ssh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;삭제하기&quot;&gt;삭제하기&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;minikube start&lt;/code&gt; 로 생성한 인스턴스 및 관련 config 를 모두 삭제합니다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ minikube delete
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;일시-정지하기&quot;&gt;일시 정지하기&lt;/h2&gt;

&lt;p&gt;사용 중인 minikube 인스턴스의 리소스 사용을 잠시 중지하고 싶은 경우, 일시 정지 기능을 사용할 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ minikube pause
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;5-기타-기능&quot;&gt;5. 기타 기능&lt;/h1&gt;

&lt;h2 id=&quot;1-minikube-내부로-파일-보내기&quot;&gt;1) minikube 내부로 파일 보내기&lt;/h2&gt;

&lt;p&gt;minikube 내부로 특정 파일이나 폴더를 옮기고 싶은 경우에는 다음 두 방법 중 하나를 사용하시면 됩니다.&lt;/p&gt;

&lt;h3 id=&quot;a-scp-활용&quot;&gt;A) scp 활용&lt;/h3&gt;
&lt;p&gt;minikukbe 의 default user name 은 docker 이며, ssh-key 를 통한 접근이 필요합니다. 따라서 minikube 의 내장 기능인 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;minikube ssh-key&lt;/code&gt; 와 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;minikube ip&lt;/code&gt; 커맨드를 사용하여 접속정보를 얻은 후 scp 를 진행합니다.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ scp -i $(minikube ssh-key) &amp;lt;local-path&amp;gt; docker@\$(minikube ip):&amp;lt;remote-path&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;예)&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ scp -i $(minikube ssh-key) /home/myuser/sourceFolder docker@$(minikube ip):/home/docker/destiationFolder
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;b-minikube-mount-활용&quot;&gt;B) minikube mount 활용&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;minikube mount&lt;/code&gt; 기능을 사용하여 호스트의 특정 디렉토리를 minikube 와 동기화해버리는 방법도 있습니다.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ minikube mount [flags] &amp;lt;source directory&amp;gt;:&amp;lt;target directory&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;예)&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ minikube mount /home/myuser/sourceFolder:/home/docker/destiationFolder
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;2-minikube-에-insecure-registry-설정하기&quot;&gt;2) minikube 에 insecure-registry 설정하기&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;minikube start&lt;/code&gt; 시에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--insecure-registry&lt;/code&gt; flag 를 사용하면, minikube 내부에서 insecure-registry 등록을 따로 하지 않아도 자동으로 설정됩니다.&lt;/p&gt;

&lt;p&gt;예)&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ minikube start --insecure-registry &quot;192.168.7.55:5000&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>김재연</name></author><category term="k8s" /><summary type="html">1. 개요 쿠버네티스를 처음 공부할 때, 가장 먼저 접하게 되는 쿠버네티스 환경인 Minikube 를 사용하는 기본적인 방법을 다룹니다. Minikube 공식 문서 중 주로 사용하는 기능들을 위주로 작성되었습니다. Minikube 라는 단어에서 유추할 수 있듯이, 나만의 작은 쿠버네티스 클러스터를 로컬에 구축하고 사용하고자 하는 분들을 위해, CNCF 에서 직접 개발, 관리하는 오픈소스 프로젝트입니다. 쿠버네티스를 처음 접하는 분들은 쿠버네티스 환경을 직접 구성하는 것 자체가 사실 매우 어려운 일이기 때문에, 쿠버네티스 공식 튜토리얼을 포함한 대부분의 쿠버네티스 입문서는 minikube 환경에서의 테스트를 바탕으로 하고 있습니다. 본 문서는 release v1.11.0 을 기준으로 작성되었으며, 자세한 내용은 Minikube github 의 README.md 와 공식 사이트에 작성되어 있으니 참고바랍니다. 2. Prerequisite Minikube 는 linux, macos, windows 를 모두 호환하는 프로젝트이지만, 본 문서에서는 linux kernel 기반 os 를 기준으로 작성되었습니다. 특히 windows 의 경우에는 다른 부분이 다소 있을 수 있으니 주의바랍니다. 하드웨어 cpu &amp;gt;= 2 free memory &amp;gt;= 2GB free disk &amp;gt;= 20GB 외부망 접속 가능 소프트웨어 지원하는 Container or virtual machine manager 중 최소 하나 Docker, Hyperkit, Hyper-V, KVM, Parallels, Podman, VirtualBox, or VMWare curl kubectl 3. 설치 설치 방법은 굉장히 간단합니다. 먼저 원하는 작업 경로로 이동합니다. $ cd {$WorkSpace} 원하는 버전의 바이너리를 현재 경로에 다운받습니다. (예: url 에서 v1.11.0 대신 v1.10.1 로 변경하면 minikube v1.10.1 를 받을 수 있습니다.) $ curl -LO https://storage.googleapis.com/minikube/releases/v1.11.0/minikube-linux-amd64 바이너리를 $PATH 로 이동시켜 모든 경로에서 사용할 수 있게 합니다. $ sudo install minikube-linux-amd64 /usr/local/bin/minikube 다음을 입력하여 정상 설치된 것을 확인합니다. $ minikube version minikube version: v1.11.0 와 같이 출력되면 정상 설치된 것입니다. 4. 사용 방법 시작하기 minikube 를 실행합니다. $ minikube start os locale 설정이 ko_KR 로 설정되어 있다면, minikube 가 생성되고 있다는 안내 메시지들이 부분적으로 한글로 출력될 것입니다. 다만, 아직 한글 번역이 완성되지 않아 대부분의 메시지는 영어로 출력될 것입니다. minikube-translations 를 참고하여 직접 번역을 반영해주실 수 있습니다. 다음과 같이 minikube start 시 여러 옵션을 지정하여 생성할 수도 있습니다. $ minikube start --cpus=4 --memory='3000mb' --disk-size='30000mb' --driver=virtualbox --kubernetes-version=v1.16.3 cpu 4 개, memory 3000 mb, disk size 30000 mb 를 가지는 minikube 를 virtualbox hypervisor 로 생성하며, 쿠버네티스 버전은 v1.16.3 으로 생성하라는 명령입니다. 자세한 option 은 minikube start --help 를 통해 확인할 수 있습니다. 반복하여 사용하는 옵션은 다음과 같이 로컬에 정보를 저장하여, 매번 입력하지 않아도 설정되도록 할 수 있습니다. cpu, memory, disk-size 와 같이 보통 자주 변경하지 않는 옵션은 지정해놓고 사용하는 것을 추천드립니다. $ minikube config view # 로컬에 저장된 config 를 확인할 수 있습니다. $ minikube config set memory 2048 # 이후로 생성되는 minikube 는 모두 memory 2048 mb 로 생성됩니다. $ minikube config set memory 3072 # 덮어쓰기 방식으로 지정된 config 를 변경할 수도 있습니다. Driver option driver option 은 주로 다음과 같은 option 을 사용합니다. (특정 버전 이전에서는 vm-driver parameter 와 동일합니다.) 각각의 driver 마다 prerequisite 이 다릅니다. 자세한 내용은 다음 링크를 통해 확인바랍니다. 주로 사용하는 driver 에 대한 간략한 설명은 다음과 같습니다. docker : minikube 를 docker container 로 띄웁니다. 내부적으로 docker in docker 기능을 사용하여 여러 pod 들을 구동하게 됩니다. 대부분의 virtualbox : virtualbox package 를 사용해 vm 을 구축합니다. kvm2 : kvm2 를 사용해 vm 을 구축합니다. host 의 gpu 등을 minikube 내부에서 사용하고 싶은 경우 등에 사용합니다. none : root 권한으로만 사용 가능하며, host 의 docker 등의 자원들을 사용하여 Minikube 를 생성합니다. 접근하기 Minikube 를 생성하면 kubectl 이 참고하는 KUBECONFIG 경로(변경한 적이 없다면 ~/.kube/config)에 Minikube 접근을 위한 config 파일이 생성된 것을 확인하실 수 있습니다. $ kubectl config view current-context 가 Minikube 를 바라보도록 설정된 것을 확인하실 수 있습니다. $ kubectl get nodes $ kubectl get cs $ kubectl get pod -A 위 명령이 정상적으로 수행된다면, 이제 kubectl 을 사용한 k8s resource 관리를 자유롭게 할 수 있습니다. Minikube 인스턴스 내부에 직접 접근하고 싶은 경우에는, 다음 명령을 통해 접근 가능합니다. (사용한 driver option 에 따라 minikube ssh 를 사용할 수 없을 수도 있습니다.) $ minikube ssh 삭제하기 minikube start 로 생성한 인스턴스 및 관련 config 를 모두 삭제합니다. $ minikube delete 일시 정지하기 사용 중인 minikube 인스턴스의 리소스 사용을 잠시 중지하고 싶은 경우, 일시 정지 기능을 사용할 수 있습니다. $ minikube pause 5. 기타 기능 1) minikube 내부로 파일 보내기 minikube 내부로 특정 파일이나 폴더를 옮기고 싶은 경우에는 다음 두 방법 중 하나를 사용하시면 됩니다. A) scp 활용 minikukbe 의 default user name 은 docker 이며, ssh-key 를 통한 접근이 필요합니다. 따라서 minikube 의 내장 기능인 minikube ssh-key 와 minikube ip 커맨드를 사용하여 접속정보를 얻은 후 scp 를 진행합니다. $ scp -i $(minikube ssh-key) &amp;lt;local-path&amp;gt; docker@\$(minikube ip):&amp;lt;remote-path&amp;gt; 예) $ scp -i $(minikube ssh-key) /home/myuser/sourceFolder docker@$(minikube ip):/home/docker/destiationFolder B) minikube mount 활용 minikube mount 기능을 사용하여 호스트의 특정 디렉토리를 minikube 와 동기화해버리는 방법도 있습니다. $ minikube mount [flags] &amp;lt;source directory&amp;gt;:&amp;lt;target directory&amp;gt; 예) $ minikube mount /home/myuser/sourceFolder:/home/docker/destiationFolder 2) minikube 에 insecure-registry 설정하기 minikube start 시에 --insecure-registry flag 를 사용하면, minikube 내부에서 insecure-registry 등록을 따로 하지 않아도 자동으로 설정됩니다. 예) $ minikube start --insecure-registry &quot;192.168.7.55:5000&quot;</summary></entry></feed>